# modules/youtube.py

import time
import os
import re
from yt_dlp import YoutubeDL
from telethon import events, types
from service.bot import bot
from loguru import logger


# –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É
def format_size(size):
    """–ö–æ–Ω–≤–µ—Ä—Ç—É—î —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É –≤ –∑—Ä—É—á–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∑ –æ–¥–∏–Ω–∏—Ü—è–º–∏ (–ë, –ö–ë, –ú–ë, –ì–ë).

    Args:
        size (int): –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É –≤ –±–∞–π—Ç–∞—Ö.

    Returns:
        str: –†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É —É —Ñ–æ—Ä–º–∞—Ç—ñ –∑ –æ–¥–∏–Ω–∏—Ü—è–º–∏.
    """
    for unit in ["–ë", "–ö–ë", "–ú–ë", "–ì–ë"]:
        if size < 1024:
            return f"{size:.2f} {unit}"
        size /= 1024


# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —è–∫–æ—Å—Ç—ñ –≤—ñ–¥–µ–æ
def get_video_quality(message_text):
    """–í–∏–∑–Ω–∞—á–∞—î —è–∫—ñ—Å—Ç—å –≤—ñ–¥–µ–æ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ —É —Ç–µ–∫—Å—Ç—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.

    Args:
        message_text (str): –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ –º—ñ—Å—Ç–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —è–∫–æ—Å—Ç—ñ.

    Returns:
        str: –§–æ—Ä–º–∞—Ç –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ.
    """
    if "-lq" in message_text:
        return 480
    elif "-mq" in message_text:
        return 720
    elif "-hq" in message_text:
        return 1080
    elif "-bq" in message_text:
        return None


async def callback(current, total, message):
    """–û–Ω–æ–≤–ª—é—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—Ä–æ–≥—Ä–µ—Å–æ–º –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ.

    Args:
        current (int): –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö –±–∞–π—Ç—ñ–≤.
        total (int): –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–π—Ç—ñ–≤ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.
        message (Message): –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è.
    """
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∑–∞–º–∏–∫–∞–Ω–Ω—è, —â–æ–± –∑–±–µ—Ä–µ–≥—Ç–∏ —Å—Ç–∞–Ω –º—ñ–∂ –≤–∏–∫–ª–∏–∫–∞–º–∏
    if not hasattr(callback, "last_update_time"):
        callback.last_update_time = 0
    if not hasattr(callback, "update_interval"):
        callback.update_interval = 5

    current_kb = current / 1024
    total_kb = total / 1024
    current_mb = current_kb / 1024
    total_mb = total_kb / 1024

    # –û–±—á–∏—Å–ª—é—î–º–æ –≤—ñ–¥—Å–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
    percentage = (current / total) * 100

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–Ω–æ–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    current_time = time.time()
    if current_time - callback.last_update_time > callback.update_interval:
        if total_mb >= 1:
            callback_msg = f"{percentage:.2f}% Uploaded: {current_mb:.2f} MB out of {total_mb:.2f} MB"
        else:
            callback_msg = f"{percentage:.2f}% Uploaded: {current_kb:.2f} KB out of {total_kb:.2f} KB"

        logger.trace(callback_msg)
        await bot.edit_message(message, callback_msg)

        # –û–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è —á–∞—Å—É
        callback.last_update_time = current_time


def download_youtube_video(video_url, quality):
    """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –≤—ñ–¥–µ–æ –∑ YouTube –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–º URL —Ç–∞ —è–∫—ñ—Å—Ç—é.

    Args:
        video_url (str): URL –≤—ñ–¥–µ–æ –Ω–∞ YouTube.
        quality (str): –§–æ—Ä–º–∞—Ç –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—ñ–¥–µ–æ.

    Returns:
        str: –®–ª—è—Ö –¥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ–≥–æ –≤—ñ–¥–µ–æ –∞–±–æ None —É —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏.
    """
    youtube_temp_dir = os.path.join(bot.temp_dir, "youtube")
    if not os.path.exists(youtube_temp_dir):
        os.makedirs(youtube_temp_dir)

    video_format = "bestvideo{q}+bestaudio/best".format(
        q=f"[height<={quality}]" if quality else ""
    )

    ydl_opts = {
        "cookiesfrombrowser": ("firefox",),
        "format": video_format,
        "outtmpl": os.path.join(youtube_temp_dir, f"%(title)s_{quality}.%(ext)s"),
        "merge_output_format": "mp4",
        "quiet": True,
    }

    try:
        with YoutubeDL(ydl_opts) as ydl:
            info_dict = ydl.extract_info(video_url, download=True)
            video_filename = ydl.prepare_filename(info_dict)
            video_path = os.path.splitext(video_filename)[0] + ".mp4"
        return video_path

    except Exception as e:
        logger.error(f"Error downloading video from YouTube: {e}")
        return None


def parse_tags(message_text):
    """–ü–∞—Ä—Å–∏—Ç—å —Ç–µ–≥–∏ –∑ —Ç–µ–∫—Å—Ç—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.

    Args:
        message_text (str): –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.

    Returns:
        list: –°–ø–∏—Å–æ–∫ —Ç–µ–≥—ñ–≤.
    """
    tags = re.findall(r"#\w+", message_text)
    if not tags:
        tags = ["#meme"]
    return tags


async def youtube_handler(event, post=False, external_args=None, external=False):
    """–û–±—Ä–æ–±–ª—è—î –Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ –º—ñ—Å—Ç—è—Ç—å URL-–∞–¥—Ä–µ—Å–∏ YouTube, —ñ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î –≤—ñ–¥–µ–æ.

    Args:
        :param external: –ø–∞—Ä–∞–º–µ—Ç—Ä, —â–æ –≤–∫–∞–∑—É—î, —á–∏ –≤–∏–∫–ª–∏–∫–∞–Ω–∏–π –º–µ—Ç–æ–¥ –∑ —ñ–Ω—à–æ–≥–æ –º–æ–¥—É–ª—è
        :param post: —è–∫—â–æ True, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î —Ñ–∞–π–ª –≤ —á–∞—Ç –¥–µ –≤–∏–∫–ª–∏–∫–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É, —ñ–Ω–∞–∫—à–µ - –ø–æ—Å—Ç–∏—Ç—å –Ω–∞ –∫–∞–Ω–∞–ª
        :param external_args: –°–ø–∏—Å–æ–∫ –ø—Ä–∞–ø–æ—Ä—ñ–≤, —â–æ –±—É–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ñ —ñ–∑ –∑–æ–≤–Ω—ñ—à–Ω—å–æ—ó –∫–æ–º–∞–Ω–¥–∏
        :param event: (NewMessage): –ü–æ–¥—ñ—è –Ω–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
    """

    if not external:
        event_msg = event.message.message
    else:
        event_msg = event.message

    if not post:
        message_text = str(event_msg)
    else:
        message_text = str(event_msg) + " ".join(external_args)

    youtube_pattern = r"(https?://(?:www\.)?(?:youtube\.com/watch\?v=|youtu\.be/|youtube\.com/shorts/)([\w-]+))"
    youtube_match = re.search(youtube_pattern, message_text)

    if youtube_match:
        message = await event.reply("üóø –û–ø–∞, —é—Ç—É–±–∏–º–æ, —â–∞ –≤–∫—Ä–∞–¥–µ–º–æ –≤—ñ–¥–µ–æ...")
        youtube_url = youtube_match.group(1)

        # –û—Ç—Ä–∏–º—É—î–º–æ —è–∫—ñ—Å—Ç—å –≤—ñ–¥–µ–æ –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
        video_quality = get_video_quality(message_text)

        try:
            video_path = download_youtube_video(youtube_url, video_quality)

            if not video_path:
                logger.warning("Nothing found")
                await event.reply("–©–æ—Å—å —è –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π—à–æ–≤, —Ç–æ–∂ —ñ–¥–∏ –≥—É–ª—è–π")
                return

            await bot.edit_message(message, "–ó–Ω–∞–π—à–æ–≤ –≤—ñ–¥–µ–æ, —â–∞ –≤–∫—Ä–∞–¥–µ–º–æ üëÄ")

            tags = parse_tags(message_text)
            caption = f"–°–æ—É—Ä—Å({youtube_url})\n\n" + "\n".join(tags)

            try:
                total_size = os.path.getsize(video_path)

                # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—ñ–¥–µ–æ –∑ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏ –ø—Ä–æ–≥—Ä–µ—Å—É
                if not post:
                    await bot.send_file(
                        event.chat.id,
                        file=video_path,
                        progress_callback=lambda current, total: callback(
                            current, total, message
                        ),
                        supports_streaming=True,
                    )
                else:
                    await bot.send_file(
                        bot.channel,
                        caption=caption,
                        file=video_path,
                        progress_callback=lambda current, total: callback(
                            current, total, message
                        ),
                        supports_streaming=True,
                    )

                await bot.edit_message(
                    message,
                    f"–í–æüëç. –í—ñ–¥–µ–æ —É—Å–ø—ñ—à–Ω–æ –≤–∫—Ä–∞–¥–µ–Ω–æ –Ω–∞ –∫–∞–Ω–∞–ª\n\n–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –≤—ñ–¥–µ–æ —Ä–æ–∑–º—ñ—Ä–æ–º {format_size(total_size)}",
                )
                # await bot.delete_messages(event.chat, message_ids=event.reply.id)

            except Exception as e:
                logger.error(f"Error posting to channel: {e}")
                await event.reply(
                    f"–©–æ—Å—å —É –º–µ–Ω–µ –Ω–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ—é –ø–æ—Å—Ç–∏—Ç–∏ –≤—ñ–¥–µ–æ –∑ YouTube... –ú–æ–∂–ª–∏–≤–æ —Ü–µ —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—É–ø–Ω—É —Ö—É–π–Ω—é: {e}"
                )

        except Exception as e:
            error_message = f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞–Ω–Ω—ñ –≤—ñ–¥–µ–æ: {e}"
            logger.error(error_message)
            await bot.edit_message(
                message, error_message
            )


def start_module():
    logger.info("YouTube module started")

    @bot.on(events.NewMessage(from_users=bot.allowed_users, chats=bot.service_chat_id))
    async def handle_youtube_handler(event):
        await youtube_handler(event)
